Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> package
Rule 1     package -> version type_lv literalvalue
Rule 2     version -> bit bit bit
Rule 3     type_lv -> 1 0 0
Rule 4     type_op -> bit bit bit
Rule 5     lv_value -> bit bit bit bit
Rule 6     lv_ne -> 1 lv_value
Rule 7     lv_e -> 0 lv_value
Rule 8     lvs_ne -> lv_ne
Rule 9     lvs_ne -> lvs_ne lv_ne
Rule 10    lvs -> lv_e
Rule 11    lvs -> lvs_ne lv_e
Rule 12    literalvalue -> lvs
Rule 13    bit -> 0
Rule 14    bit -> 1

Terminals, with rules where they appear

0                    : 3 3 7 13
1                    : 3 6 14
error                : 

Nonterminals, with rules where they appear

bit                  : 2 2 2 4 4 4 5 5 5 5
literalvalue         : 1
lv_e                 : 10 11
lv_ne                : 8 9
lv_value             : 6 7
lvs                  : 12
lvs_ne               : 9 11
package              : 0
type_lv              : 1
type_op              : 
version              : 1

Parsing method: LALR

state 0

    (0) S' -> . package
    (1) package -> . version type_lv literalvalue
    (2) version -> . bit bit bit
    (13) bit -> . 0
    (14) bit -> . 1

    0               shift and go to state 4
    1               shift and go to state 5

    package                        shift and go to state 1
    version                        shift and go to state 2
    bit                            shift and go to state 3

state 1

    (0) S' -> package .



state 2

    (1) package -> version . type_lv literalvalue
    (3) type_lv -> . 1 0 0

    1               shift and go to state 7

    type_lv                        shift and go to state 6

state 3

    (2) version -> bit . bit bit
    (13) bit -> . 0
    (14) bit -> . 1

    0               shift and go to state 4
    1               shift and go to state 5

    bit                            shift and go to state 8

state 4

    (13) bit -> 0 .

    0               reduce using rule 13 (bit -> 0 .)
    1               reduce using rule 13 (bit -> 0 .)
    $end            reduce using rule 13 (bit -> 0 .)


state 5

    (14) bit -> 1 .

    0               reduce using rule 14 (bit -> 1 .)
    1               reduce using rule 14 (bit -> 1 .)
    $end            reduce using rule 14 (bit -> 1 .)


state 6

    (1) package -> version type_lv . literalvalue
    (12) literalvalue -> . lvs
    (10) lvs -> . lv_e
    (11) lvs -> . lvs_ne lv_e
    (7) lv_e -> . 0 lv_value
    (8) lvs_ne -> . lv_ne
    (9) lvs_ne -> . lvs_ne lv_ne
    (6) lv_ne -> . 1 lv_value

    0               shift and go to state 13
    1               shift and go to state 15

    literalvalue                   shift and go to state 9
    lvs                            shift and go to state 10
    lv_e                           shift and go to state 11
    lvs_ne                         shift and go to state 12
    lv_ne                          shift and go to state 14

state 7

    (3) type_lv -> 1 . 0 0

    0               shift and go to state 16


state 8

    (2) version -> bit bit . bit
    (13) bit -> . 0
    (14) bit -> . 1

    0               shift and go to state 4
    1               shift and go to state 5

    bit                            shift and go to state 17

state 9

    (1) package -> version type_lv literalvalue .

    $end            reduce using rule 1 (package -> version type_lv literalvalue .)


state 10

    (12) literalvalue -> lvs .

    $end            reduce using rule 12 (literalvalue -> lvs .)


state 11

    (10) lvs -> lv_e .

    $end            reduce using rule 10 (lvs -> lv_e .)


state 12

    (11) lvs -> lvs_ne . lv_e
    (9) lvs_ne -> lvs_ne . lv_ne
    (7) lv_e -> . 0 lv_value
    (6) lv_ne -> . 1 lv_value

    0               shift and go to state 13
    1               shift and go to state 15

    lv_e                           shift and go to state 18
    lv_ne                          shift and go to state 19

state 13

    (7) lv_e -> 0 . lv_value
    (5) lv_value -> . bit bit bit bit
    (13) bit -> . 0
    (14) bit -> . 1

    0               shift and go to state 4
    1               shift and go to state 5

    lv_value                       shift and go to state 20
    bit                            shift and go to state 21

state 14

    (8) lvs_ne -> lv_ne .

    0               reduce using rule 8 (lvs_ne -> lv_ne .)
    1               reduce using rule 8 (lvs_ne -> lv_ne .)


state 15

    (6) lv_ne -> 1 . lv_value
    (5) lv_value -> . bit bit bit bit
    (13) bit -> . 0
    (14) bit -> . 1

    0               shift and go to state 4
    1               shift and go to state 5

    lv_value                       shift and go to state 22
    bit                            shift and go to state 21

state 16

    (3) type_lv -> 1 0 . 0

    0               shift and go to state 23


state 17

    (2) version -> bit bit bit .

    1               reduce using rule 2 (version -> bit bit bit .)


state 18

    (11) lvs -> lvs_ne lv_e .

    $end            reduce using rule 11 (lvs -> lvs_ne lv_e .)


state 19

    (9) lvs_ne -> lvs_ne lv_ne .

    0               reduce using rule 9 (lvs_ne -> lvs_ne lv_ne .)
    1               reduce using rule 9 (lvs_ne -> lvs_ne lv_ne .)


state 20

    (7) lv_e -> 0 lv_value .

    $end            reduce using rule 7 (lv_e -> 0 lv_value .)


state 21

    (5) lv_value -> bit . bit bit bit
    (13) bit -> . 0
    (14) bit -> . 1

    0               shift and go to state 4
    1               shift and go to state 5

    bit                            shift and go to state 24

state 22

    (6) lv_ne -> 1 lv_value .

    0               reduce using rule 6 (lv_ne -> 1 lv_value .)
    1               reduce using rule 6 (lv_ne -> 1 lv_value .)


state 23

    (3) type_lv -> 1 0 0 .

    0               reduce using rule 3 (type_lv -> 1 0 0 .)
    1               reduce using rule 3 (type_lv -> 1 0 0 .)


state 24

    (5) lv_value -> bit bit . bit bit
    (13) bit -> . 0
    (14) bit -> . 1

    0               shift and go to state 4
    1               shift and go to state 5

    bit                            shift and go to state 25

state 25

    (5) lv_value -> bit bit bit . bit
    (13) bit -> . 0
    (14) bit -> . 1

    0               shift and go to state 4
    1               shift and go to state 5

    bit                            shift and go to state 26

state 26

    (5) lv_value -> bit bit bit bit .

    $end            reduce using rule 5 (lv_value -> bit bit bit bit .)
    0               reduce using rule 5 (lv_value -> bit bit bit bit .)
    1               reduce using rule 5 (lv_value -> bit bit bit bit .)

